package fr.esstin.baresstin.actions.admin.orders;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.ejb.EJB;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Result;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

import fr.esstin.baresstin.dto.ClientDto;
import fr.esstin.baresstin.dto.OrderItemDto;
import fr.esstin.baresstin.dto.ProductDto;
import fr.esstin.baresstin.dto.OrderDto;
import fr.esstin.baresstin.service.OrderServiceLocal;
import fr.esstin.baresstin.service.ProductServiceLocal;

public class ConfirmAction extends ActionSupport {
	
	private static final long serialVersionUID = 1L;

	@EJB
	private OrderServiceLocal orderService;
	
	@EJB
	private ProductServiceLocal productService;

	private ClientDto client;
	private List<ProductDto> order;
	private List<OrderItemDto> orderitems;
	
	private Map<String, Object> session = ActionContext.getContext().getSession();

	@SuppressWarnings("unchecked")
	@Action(results={
		@Result(name="chooseclient", type="redirect", location="chooseclient"),
		@Result(name="chooseproducts", type="redirect", location="chooseprodcuts")
	})
	public String execute() {
		if (session.get("client") == null) {
			return "chooseclient";
		}
		if (session.get("order") == null) {
			return "chooseproducts";
		}
		
		client = (ClientDto)session.get("client");
		order = (List<ProductDto>)session.get("order");
		
		return "success";		
	}
	
	@SuppressWarnings("unchecked")
	@Action(value="save", results={
		@Result(name="success", type="redirect", location="listproducts")
	})
	public String save() {
		client = (ClientDto)session.get("client");
		order = (List<ProductDto>)session.get("order");
		
		OrderDto o = new OrderDto();
		o.setDatePlaced(new Date());
		o.setStatus("pending");
		o.setClientId(client.getId());
		o.setClientName(client.getName());
		o.setOrderItems(new ArrayList<OrderItemDto>());
		
		
		for (OrderItemDto oi : orderitems) {
			System.out.println("MenuId ConfirmAction : "+oi.getMenu().getId());
				
				//if (oi.getMenu().getId()>0)
			ProductDto p = productService.findProductById(oi.getProduct().getId(),false);
			BigDecimal price = oi.getProduct().getPrice();
			System.out.println("price ConfirmAction"+price);
			if (p != null) {
				oi.setProduct(p);
			}
			oi.setOrderItemPrice(price);
			
			//orderService.addItemForOrder(o.getId(), oi);
			o.getOrderItems().add(oi);
			
			// set the order's delivered status
		/*	if (oi.getDelivered()) {
				orderService.deliverItem(o, oi.getId());
			}*/
		}		
		orderService.add(o);
		
		session.remove("client");
		session.remove("order");
		
		return "success";
	}
	
	public ClientDto getClient() {
		return client;
	}

	public List<ProductDto> getOrder() {
		return order;
	}
	
	public List<OrderItemDto> getOrderitems() {
		return orderitems;
	}

	public void setOrderitems(List<OrderItemDto> orderitems) {
		this.orderitems = orderitems;
	}

}
